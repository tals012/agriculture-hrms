// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL_PRISMA_URL") // uses connection pooling
  directUrl = env("DATABASE_URL_URL_NON_POOLING") // uses a direct connection
}

model Organization {
  id String @id @default(cuid())

  name                   String
  email                  String  @unique
  phone                  String?
  address                String?
  city                   String?
  zip                    String?
  internalOrganizationId String?

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id String @id @default(cuid())

  name      String
  username  String  @unique
  password  String
  email     String  @unique
  phone     String?
  role      Role?
  signature Bytes?

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  FIELD_MANAGER
  FOREIGN_WORKER
}

model Client {
  id              String        @id @default(cuid())
  serialNumber    Int           @default(autoincrement())
  name            String
  nameEnglish     String?
  email           String        @unique
  phone           String
  secondaryPhone  String?
  logo            String?
  openingDate     DateTime?
  address         String?
  postalCode      String?
  licenseNumber   String?
  licenseExist    Boolean?
  licenseFromDate DateTime?
  licenseToDate   DateTime?
  businessGovId   String?
  fax             String?
  accountantPhone String?
  status          ClientStatus?
  note            String?

  workers  Worker[]
  fields   Field[]
  managers Manager[]
  city     City?     @relation(fields: [cityId], references: [id])
  cityId   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ClientStatus {
  ACTIVE
  INACTIVE
}

model Worker {
  id         String  @id @default(cuid())
  workerCode String?

  name                String?
  surname             String?
  fatherName          String?
  motherName          String?
  nameSpouse          String?
  nameHe              String?
  surnameHe           String?
  primaryPhone        String?
  secondaryPhone      String?
  email               String?
  address             String?
  sex                 Gender?
  birthday            DateTime?
  maritalStatus       MaritalStatus?
  primaryLanguage     String?
  primaryLanguages    String[]
  secondaryLanguage   String?
  secondaryLanguages  String[]
  additionalLanguages String[]
  countryArea         String?
  religion            String?
  workerStatus        WorkerStatus?  @default(ACTIVE)
  company             String?
  metapelCode         String?

  passport         String?
  passportValidity DateTime?
  visa             String?
  visaValidity     DateTime?
  inscriptionDate  DateTime?
  entryDate        DateTime?

  favoritePlace String?
  favoriteSex   String?
  partnerPlace  String?

  note String?

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  harvestEntries HarvestEntry[]
  groups         Group[]

  country   Country? @relation(fields: [countryId], references: [id])
  countryId String?

  city   City?   @relation(fields: [cityId], references: [id])
  cityId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum WorkerStatus {
  ACTIVE
  INACTIVE
  FREEZE
  COMMITTEE
  HIDDEN
  IN_TRANSIT
  ALL
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum Gender {
  MALE
  FEMALE
}

model Field {
  id            Int       @id @default(autoincrement())
  name          String
  location      String
  size          Float
  typeOfProduct String
  clientId      String
  client        Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  harvests      Harvest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Harvest {
  id          Int            @id @default(autoincrement())
  fieldId     Int
  field       Field          @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  harvestType String
  species     String
  price       Float
  entries     HarvestEntry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HarvestEntry {
  id                    Int      @id @default(autoincrement())
  workerId              String
  worker                Worker   @relation(fields: [workerId], references: [id], onDelete: Cascade)
  harvestId             Int
  harvest               Harvest  @relation(fields: [harvestId], references: [id], onDelete: Cascade)
  entryTime             DateTime
  exitTime              DateTime
  containersFilled      Int
  productivityIndicator Int
  bonus                 Float
  verificationPhoto     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Manager {
  id       String  @id @default(cuid())
  name     String
  email    String  @unique
  phone    String
  role     String
  clientId String
  client   Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  groups   Group[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id           String   @id @default(cuid())
  supervisorId String
  supervisor   Manager  @relation(fields: [supervisorId], references: [id], onDelete: Cascade)
  groupName    String
  schedule     String
  workers      Worker[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Country {
  id            String  @id @default(cuid())
  nameInHebrew  String
  nameInEnglish String?
  code          String

  workers Worker[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id            String  @id @default(cuid())
  cityCode      String
  nameInHebrew  String
  nameInEnglish String?

  clients Client[]
  worker  Worker[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
