// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL_PRISMA_URL") // uses connection pooling
  directUrl = env("DATABASE_URL_URL_NON_POOLING") // uses a direct connection
}

model Organization {
  id String @id @default(cuid())

  name                   String
  email                  String  @unique
  phone                  String?
  address                String?
  city                   String?
  zip                    String?
  internalOrganizationId String?

  users        User[]
  species      Species[]
  harvestTypes HarvestType[]

  workingSchedule WorkingSchedule[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id String @id @default(cuid())

  name      String
  username  String  @unique
  password  String
  email     String  @unique
  phone     String?
  role      Role?
  signature Bytes?

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  manager Manager?
  worker  Worker?

  workerAttendance WorkerAttendance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  FIELD_MANAGER
  GROUP_LEADER
}

model Client {
  id              String        @id @default(cuid())
  serialNumber    Int           @default(autoincrement())
  name            String
  nameEnglish     String?
  email           String        @unique
  phone           String
  secondaryPhone  String?
  logo            String?
  openingDate     DateTime?
  address         String?
  postalCode      String?
  licenseNumber   String?
  licenseExist    Boolean?
  licenseFromDate DateTime?
  licenseToDate   DateTime?
  businessGovId   String?
  fax             String?
  accountantPhone String?
  status          ClientStatus? @default(ACTIVE)
  note            String?

  fields         Field[] // Client's agricultural fields
  managers       Manager[] // Field managers employed by the client
  currentWorkers Worker[]              @relation("CurrentWorkers") // Currently employed foreign workers
  workerHistory  WorkerClientHistory[] // Historical record of all workers

  city   City?   @relation(fields: [cityId], references: [id])
  cityId String?

  clientPricingCombination ClientPricingCombination[]

  workingSchedule WorkingSchedule[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ClientStatus {
  ACTIVE
  INACTIVE
}

model Worker {
  id         String  @id @default(cuid())
  workerCode String?

  name                String?
  surname             String?
  fatherName          String?
  motherName          String?
  nameSpouse          String?
  nameHe              String?
  surnameHe           String?
  primaryPhone        String?
  secondaryPhone      String?
  email               String?
  address             String?
  sex                 Gender?
  birthday            DateTime?
  maritalStatus       MaritalStatus?
  primaryLanguage     String?
  primaryLanguages    String[]
  secondaryLanguage   String?
  secondaryLanguages  String[]
  additionalLanguages String[]
  countryArea         String?
  religion            String?
  workerStatus        WorkerStatus?  @default(ACTIVE)
  company             String?
  metapelCode         String?

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  passport         String?
  passportValidity DateTime?
  visa             String?
  visaValidity     DateTime?
  inscriptionDate  DateTime?
  entryDate        DateTime?

  favoritePlace String?
  favoriteSex   String?
  partnerPlace  String?

  note String?

  currentClientId String?
  currentClient   Client?               @relation("CurrentWorkers", fields: [currentClientId], references: [id])
  clientHistory   WorkerClientHistory[]

  harvestEntries HarvestEntry[]
  groups         GroupMember[]

  country   Country? @relation(fields: [countryId], references: [id])
  countryId String?

  city   City?   @relation(fields: [cityId], references: [id])
  cityId String?

  attendance WorkerAttendance[]

  workingSchedule WorkingSchedule[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum WorkerStatus {
  ACTIVE
  INACTIVE
  FREEZE
  COMMITTEE
  HIDDEN
  IN_TRANSIT
  ALL
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum Gender {
  MALE
  FEMALE
}

model Field {
  id                       String         @id @default(cuid())
  serialNumber             Int            @default(autoincrement())
  name                     String         @default("")
  typeOfProduct            String // Type of crop or product grown in this field
  contactPhone             String?
  contactPersonName        String?
  additionalPhone          String?
  withholdingAccountNumber String?
  address                  String?
  fieldTax                 String?
  fieldCode                String?
  size                     Float?
  status                   ProjectStatus? @default(ACTIVE)
  latitude                 Float?
  longitude                Float?
  fieldOpenTime            Float?         @default(480)
  fieldCloseTime           Float?         @default(1020)
  note                     String?

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  managerId String?
  manager   Manager?  @relation(fields: [managerId], references: [id])
  groups    Group[] // Groups working in this field
  harvests  Harvest[] // Harvest records for this field

  workingSchedule WorkingSchedule[]

  city   City?   @relation(fields: [cityId], references: [id])
  cityId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
}

model Harvest {
  id   String   @id @default(cuid())
  date DateTime @default(now())

  fieldId String
  field   Field  @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  speciesId String
  species   Species @relation(fields: [speciesId], references: [id])

  harvestTypeId String
  harvestType   HarvestType @relation(fields: [harvestTypeId], references: [id])

  entries HarvestEntry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HarvestEntry {
  id                    String   @id @default(cuid())
  workerId              String
  worker                Worker   @relation(fields: [workerId], references: [id], onDelete: Cascade)
  harvestId             String
  harvest               Harvest  @relation(fields: [harvestId], references: [id], onDelete: Cascade)
  entryTime             DateTime
  exitTime              DateTime
  containersFilled      Int
  productivityIndicator Int
  bonus                 Float
  verificationPhoto     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Manager {
  id    String @id @default(cuid())
  name  String
  email String @unique
  phone String

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  clientId         String
  client           Client             @relation(fields: [clientId], references: [id], onDelete: Cascade)
  fields           Field[] // Fields managed by this manager
  workerAttendance WorkerAttendance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id          String  @id @default(cuid())
  name        String
  description String?

  fieldId                  String
  field                    Field                      @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  members                  GroupMember[]
  clientPricingCombination ClientPricingCombination[]
  // attendance               GroupAttendance[]
  workingSchedule          WorkingSchedule[]
  workerAttendance         WorkerAttendance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GroupMember {
  id String @id @default(cuid())

  groupId String
  group   Group  @relation(fields: [groupId], references: [id])

  workerId String
  worker   Worker @relation(fields: [workerId], references: [id])

  isGroupLeader Boolean?

  startDate DateTime  @default(now())
  endDate   DateTime?

  workerAttendance WorkerAttendance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Country {
  id            String  @id @default(cuid())
  nameInHebrew  String
  nameInEnglish String?
  code          String

  workers Worker[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id            String  @id @default(cuid())
  cityCode      String
  nameInHebrew  String
  nameInEnglish String?

  clients Client[]
  workers Worker[]
  fields  Field[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkerClientHistory {
  id        String    @id @default(cuid())
  workerId  String
  clientId  String
  startDate DateTime  @default(now())
  endDate   DateTime?
  note      String?

  worker Worker @relation(fields: [workerId], references: [id])
  client Client @relation(fields: [clientId], references: [id])

  @@index([workerId])
  @@index([clientId])
}

// Species = Product = Crop eg: Tomato, Orange, Apple, etc.
model Species {
  id          String  @id @default(cuid())
  name        String
  description String?

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  harvests Harvest[] // Harvests of this species

  clientPricingCombination ClientPricingCombination[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HarvestType {
  id          String  @id @default(cuid())
  name        String
  description String?

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  harvests Harvest[] // Harvests of this type

  clientPricingCombination ClientPricingCombination[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ClientPricingCombination {
  id String @id @default(cuid())

  name String?

  harvestTypeId String
  harvestType   HarvestType @relation(fields: [harvestTypeId], references: [id])

  speciesId String
  species   Species @relation(fields: [speciesId], references: [id])

  price Float

  containerNorm Float?

  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  groups           Group[]
  // attendance GroupAttendance[]
  workerAttendance WorkerAttendance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkingSchedule {
  id String @id @default(cuid())

  source WorkingScheduleSource @default(ORGANIZATION)

  numberOfTotalHoursPerDay          Float   @default(8)
  numberOfTotalHoursPerDayWindow100 Float?
  numberOfTotalHoursPerDayWindow125 Float?
  numberOfTotalHoursPerDayWindow150 Float?
  numberOfTotalDaysPerWeek          Float   @default(6)
  numberOfTotalDaysPerMonth         Float
  startTimeInMinutes                Float   @default(480)
  endTimeInMinutes                  Float   @default(1020)
  breakTimeInMinutes                Float   @default(30)
  isBreakTimePaid                   Boolean @default(false)

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  clientId       String?
  client         Client?       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  fieldId        String?
  field          Field?        @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  groupId        String?
  group          Group?        @relation(fields: [groupId], references: [id], onDelete: Cascade)
  workerId       String?
  worker         Worker?       @relation(fields: [workerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum WorkingScheduleSource {
  ORGANIZATION
  CLIENT
  FIELD
  GROUP
  WORKER
}

model WorkerAttendance {
  id String @id @default(cuid())

  attendanceDoneBy            AttendanceDoneBy         @default(ADMIN)
  attendanceAdministratorName String?
  attendanceDate              DateTime                 @default(now())
  combinationId               String // harvest type + species + container norm
  combination                 ClientPricingCombination @relation(fields: [combinationId], references: [id])
  issues                      String[]

  startTimeInMinutes        Float?   @default(480)
  endTimeInMinutes          Float?   @default(1020)
  breakTimeInMinutes        Float?
  totalHoursWorked          Float?
  totalHoursWorkedWindow100 Float?
  totalHoursWorkedWindow125 Float?
  totalHoursWorkedWindow150 Float?
  totalContainersFilled     Float?
  isBreakTimePaid           Boolean? @default(false)
  breakTimeAmount           Float?
  totalWage                 Float?

  status WorkerAttendanceStatus

  workerId String
  worker   Worker @relation(fields: [workerId], references: [id])

  groupId String?
  group   Group?  @relation(fields: [groupId], references: [id])

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  managerId String?
  manager   Manager? @relation(fields: [managerId], references: [id])

  leaderId String?
  leader   GroupMember? @relation(fields: [leaderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum WorkerAttendanceStatus {
  WORKING
  SICK_LEAVE
  DAY_OFF
  HOLIDAY
  INTER_VISA
  NO_SCHEDULE
  ABSENT
  DAY_OFF_PERSONAL_REASON
  WEEKEND
  ACCIDENT
  NOT_WORKING_BUT_PAID
}

enum AttendanceDoneBy {
  ADMIN
  MANAGER
  LEADER
}
