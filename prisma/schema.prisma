// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL_PRISMA_URL") // uses connection pooling
  directUrl = env("DATABASE_URL_URL_NON_POOLING") // uses a direct connection
}

model Organization {
  id String @id @default(cuid())

  name                   String
  email                  String  @unique
  phone                  String?
  address                String?
  city                   String?
  zip                    String?
  internalOrganizationId String?
  lawRate100             Float?
  lawRate125             Float?
  lawRate150             Float?

  users        User[]
  species      Species[]
  harvestTypes HarvestType[]

  workingSchedule WorkingSchedule[]

  sms SMS[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id String @id @default(cuid())

  name      String
  username  String  @unique
  password  String
  email     String  @unique
  phone     String?
  role      Role?
  signature Bytes?

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  manager Manager?
  regionManager RegionManager?
  worker  Worker?

  workerAttendance WorkerAttendance[]
  workerDocuments  WorkerDocument[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  FIELD_MANAGER
  REGION_MANAGER
  GROUP_LEADER
  WORKER
}

model Client {
  id              String        @id @default(cuid())
  serialNumber    Int           @default(autoincrement())
  name            String
  nameEnglish     String?
  email           String        @unique
  phone           String
  secondaryPhone  String?
  logo            String?
  openingDate     DateTime?
  address         String?
  postalCode      String?
  licenseNumber   String?
  licenseExist    Boolean?
  licenseFromDate DateTime?
  licenseToDate   DateTime?
  businessGovId   String?
  fax             String?
  accountantPhone String?
  status          ClientStatus? @default(ACTIVE)
  note            String?

  fields         Field[] // Client's agricultural fields
  managers       Manager[] // Field managers employed by the client
  regionManagers RegionManager[] // Region managers employed by the client
  currentWorkers Worker[]              @relation("CurrentWorkers") // Currently employed foreign workers
  workerHistory  WorkerClientHistory[] // Historical record of all workers

  city   City?   @relation(fields: [cityId], references: [id])
  cityId String?

  clientPricingCombination ClientPricingCombination[]

  workingSchedule WorkingSchedule[]

  sms SMS[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ClientStatus {
  ACTIVE
  INACTIVE
}

model Worker {
  id           String  @id @default(cuid())
  workerCode   String?
  serialNumber Int     @default(autoincrement())

  name                String?
  surname             String?
  fatherName          String?
  motherName          String?
  nameSpouse          String?
  nameHe              String?
  surnameHe           String?
  primaryPhone        String?
  secondaryPhone      String?
  email               String?
  address             String?
  sex                 Gender?
  birthday            DateTime?
  maritalStatus       MaritalStatus?
  primaryLanguage     String?
  primaryLanguages    String[]
  secondaryLanguage   String?
  secondaryLanguages  String[]
  additionalLanguages String[]
  countryArea         String?
  religion            String?
  workerStatus        WorkerStatus?  @default(ACTIVE)
  company             String?
  metapelCode         String?

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  passport         String?
  passportValidity DateTime?
  visa             String?
  visaValidity     DateTime?
  inscriptionDate  DateTime?
  entryDate        DateTime?

  favoritePlace String?
  favoriteSex   String?
  partnerPlace  String?

  note String?

  currentClientId String?
  currentClient   Client?               @relation("CurrentWorkers", fields: [currentClientId], references: [id])
  clientHistory   WorkerClientHistory[]

  harvestEntries HarvestEntry[]
  groups         GroupMember[]

  country   Country? @relation(fields: [countryId], references: [id])
  countryId String?

  city   City?   @relation(fields: [cityId], references: [id])
  cityId String?

  bank              Bank?   @relation(fields: [bankId], references: [id])
  bankId            String?
  branch            Branch? @relation(fields: [branchId], references: [id])
  branchId          String?
  bankAccountNumber String?

  street      String?
  houseNumber String?
  apartment   String?
  postalCode  String?

  attendance         WorkerAttendance[]
  workingSchedule    WorkingSchedule[]
  monthlySubmissions WorkerMonthlyWorkingHoursSubmission[]
  dailyCalculations  WorkerDailySalaryCalculation[]

  documents WorkerDocument[]
  sms       SMS[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum WorkerStatus {
  ACTIVE
  INACTIVE
  FREEZE
  COMMITTEE
  HIDDEN
  IN_TRANSIT
  ALL
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum Gender {
  MALE
  FEMALE
}

model Field {
  id                       String         @id @default(cuid())
  serialNumber             Int            @default(autoincrement())
  name                     String         @default("")
  typeOfProduct            String // Type of crop or product grown in this field
  contactPhone             String?
  contactPersonName        String?
  additionalPhone          String?
  withholdingAccountNumber String?
  address                  String?
  fieldTax                 String?
  fieldCode                String?
  size                     Float?
  status                   ProjectStatus? @default(ACTIVE)
  latitude                 Float?
  longitude                Float?
  fieldOpenTime            Float?         @default(480)
  fieldCloseTime           Float?         @default(1020)
  note                     String?

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  managerId String?
  manager   Manager?  @relation(fields: [managerId], references: [id])
  regionManagerId String?
  regionManager   RegionManager? @relation(fields: [regionManagerId], references: [id])
  groups    Group[] // Groups working in this field
  harvests  Harvest[] // Harvest records for this field

  workingSchedule WorkingSchedule[]

  city   City?   @relation(fields: [cityId], references: [id])
  cityId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
}

model Harvest {
  id   String   @id @default(cuid())
  date DateTime @default(now())

  fieldId String
  field   Field  @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  speciesId String
  species   Species @relation(fields: [speciesId], references: [id])

  harvestTypeId String
  harvestType   HarvestType @relation(fields: [harvestTypeId], references: [id])

  entries HarvestEntry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HarvestEntry {
  id                    String   @id @default(cuid())
  workerId              String
  worker                Worker   @relation(fields: [workerId], references: [id], onDelete: Cascade)
  harvestId             String
  harvest               Harvest  @relation(fields: [harvestId], references: [id], onDelete: Cascade)
  entryTime             DateTime
  exitTime              DateTime
  containersFilled      Int
  productivityIndicator Int
  bonus                 Float
  verificationPhoto     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Manager {
  id    String @id @default(cuid())
  name  String
  email String @unique
  phone String

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  clientId         String
  client           Client             @relation(fields: [clientId], references: [id], onDelete: Cascade)
  fields           Field[] // Fields managed by this manager
  workerAttendance WorkerAttendance[]
  sms              SMS[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RegionManager {
  id    String @id @default(cuid())
  name  String
  email String @unique
  phone String

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  fields   Field[]
  sms      SMS[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id          String  @id @default(cuid())
  name        String
  description String?

  fieldId                  String
  field                    Field                      @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  members                  GroupMember[]
  clientPricingCombination ClientPricingCombination[]
  workingSchedule          WorkingSchedule[]
  workerAttendance         WorkerAttendance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GroupMember {
  id String @id @default(cuid())

  groupId String
  group   Group  @relation(fields: [groupId], references: [id])

  workerId String
  worker   Worker @relation(fields: [workerId], references: [id])

  isGroupLeader Boolean?

  startDate DateTime  @default(now())
  endDate   DateTime?

  workerAttendance WorkerAttendance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Country {
  id            String  @id @default(cuid())
  nameInHebrew  String
  nameInEnglish String?
  code          String

  workers Worker[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id            String  @id @default(cuid())
  cityCode      String
  nameInHebrew  String
  nameInEnglish String?

  clients Client[]
  workers Worker[]
  fields  Field[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkerClientHistory {
  id        String    @id @default(cuid())
  workerId  String
  clientId  String
  startDate DateTime  @default(now())
  endDate   DateTime?
  note      String?

  worker Worker @relation(fields: [workerId], references: [id])
  client Client @relation(fields: [clientId], references: [id])

  @@index([workerId])
  @@index([clientId])
}

// Species = Product = Crop eg: Tomato, Orange, Apple, etc.
model Species {
  id          String  @id @default(cuid())
  name        String
  description String?

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  harvests Harvest[] // Harvests of this species

  clientPricingCombination ClientPricingCombination[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HarvestType {
  id          String  @id @default(cuid())
  name        String
  description String?

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  harvests Harvest[] // Harvests of this type

  clientPricingCombination ClientPricingCombination[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ClientPricingCombination {
  id String @id @default(cuid())

  name String?

  harvestTypeId String
  harvestType   HarvestType @relation(fields: [harvestTypeId], references: [id])

  speciesId String
  species   Species @relation(fields: [speciesId], references: [id])

  price Float

  containerNorm Float?

  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  groups            Group[]
  // attendance GroupAttendance[]
  workerAttendance  WorkerAttendance[]
  dailyCalculations WorkerDailySalaryCalculation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkingSchedule {
  id String @id @default(cuid())

  source WorkingScheduleSource @default(ORGANIZATION)

  numberOfTotalHoursPerDay          Float   @default(8)
  numberOfTotalHoursPerDayWindow100 Float?
  numberOfTotalHoursPerDayWindow125 Float?
  numberOfTotalHoursPerDayWindow150 Float?
  numberOfTotalDaysPerWeek          Float   @default(6)
  numberOfTotalDaysPerMonth         Float
  startTimeInMinutes                Float   @default(480)
  endTimeInMinutes                  Float   @default(1020)
  breakTimeInMinutes                Float   @default(30)
  isBreakTimePaid                   Boolean @default(false)
  isBonusPaid                       Boolean @default(false)

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  clientId       String?
  client         Client?       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  fieldId        String?
  field          Field?        @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  groupId        String?
  group          Group?        @relation(fields: [groupId], references: [id], onDelete: Cascade)
  workerId       String?
  worker         Worker?       @relation(fields: [workerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum WorkingScheduleSource {
  ORGANIZATION
  CLIENT
  FIELD
  GROUP
  WORKER
}

model WorkerAttendance {
  id String @id @default(cuid())

  approvalStatus  ApprovalStatus @default(PENDING)
  approvalDate    DateTime?
  rejectionReason String?

  attendanceDoneBy            AttendanceDoneBy          @default(ADMIN)
  attendanceAdministratorName String?
  attendanceDate              DateTime                  @default(now())
  combinationId               String? // harvest type + species + container norm
  combination                 ClientPricingCombination? @relation(fields: [combinationId], references: [id])
  issues                      String[]

  startTimeInMinutes        Float?   @default(480)
  endTimeInMinutes          Float?   @default(1020)
  breakTimeInMinutes        Float?
  totalHoursWorked          Float?
  totalHoursWorkedWindow100 Float?
  totalHoursWorkedWindow125 Float?
  totalHoursWorkedWindow150 Float?
  totalContainersFilled     Float?
  isBreakTimePaid           Boolean? @default(false)
  breakTimeAmount           Float?
  totalWage                 Float?

  status WorkerAttendanceStatus

  workerId String
  worker   Worker @relation(fields: [workerId], references: [id])

  groupId String?
  group   Group?  @relation(fields: [groupId], references: [id])

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  managerId String?
  manager   Manager? @relation(fields: [managerId], references: [id])

  leaderId String?
  leader   GroupMember? @relation(fields: [leaderId], references: [id])

  dailyCalculations WorkerDailySalaryCalculation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum WorkerAttendanceStatus {
  WORKING
  SICK_LEAVE
  DAY_OFF
  HOLIDAY
  INTER_VISA
  NO_SCHEDULE
  ABSENT
  DAY_OFF_PERSONAL_REASON
  WEEKEND
  ACCIDENT
  NOT_WORKING_BUT_PAID
}

enum AttendanceDoneBy {
  ADMIN
  MANAGER
  LEADER
  WORKER
}

model WorkerDailySalaryCalculation {
  id              String   @id @default(cuid())
  calculationDate DateTime

  // Base Data
  containersFilled Float
  containerNorm    Float
  pricePerNorm     Float

  // Window Breakdowns
  containersWindow100 Float
  containersWindow125 Float
  containersWindow150 Float

  // Money
  baseSalary     Float @default(0) // 100%
  totalBonus     Float @default(0)
  totalSalary    Float @default(0) // total
  hours125Salary Float @default(0) // 125%
  hours150Salary Float @default(0) // 150%

  // Status
  status WorkerAttendanceStatus

  // Relations
  workerId String
  worker   Worker @relation(fields: [workerId], references: [id], onDelete: Cascade)

  monthlySubmissionId String
  monthlySubmission   WorkerMonthlyWorkingHoursSubmission @relation(fields: [monthlySubmissionId], references: [id], onDelete: Cascade)

  attendanceId String?
  attendance   WorkerAttendance? @relation(fields: [attendanceId], references: [id], onDelete: SetNull)

  combinationId String?
  combination   ClientPricingCombination? @relation(fields: [combinationId], references: [id], onDelete: SetNull)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Unique constraints
  @@unique([workerId, calculationDate])
  @@unique([monthlySubmissionId, calculationDate])
  // Indexes for common queries
  @@index([workerId])
  @@index([monthlySubmissionId])
  @@index([calculationDate])
  @@index([attendanceId])
  @@index([combinationId])
  @@index([workerId, calculationDate])
  @@index([monthlySubmissionId, calculationDate])
  @@index([workerId, status])
  @@index([monthlySubmissionId, status])
  @@index([workerId, monthlySubmissionId])
  @@index([status, calculationDate])
  @@index([workerId, status, calculationDate])
}

model WorkerMonthlyWorkingHoursSubmission {
  id                                        String         @id @default(cuid())
  monthYear                                 String // 12/2024
  firstDayOfMonth                           DateTime // 2024-12-01T00:00:00.000Z
  signature                                 String? // for later use
  signedAt                                  DateTime? // for later use
  approvalStatus                            ApprovalStatus @default(PENDING)
  approvalResponseAt                        DateTime?
  createdAt                                 DateTime       @default(now())
  updatedAt                                 DateTime       @updatedAt
  isSentToSalarySystem                      Boolean        @default(false)
  normalWorkingDays                         Int?
  smsReminderSent                           Boolean        @default(false) // for later use
  supposedTotalMonthlyHours                 Float?
  supposedTotalMonthlyHours100              Float?
  supposedTotalMonthlyHours125              Float?
  supposedTotalMonthlyHours150              Float?
  totalDaysOff                              Int?
  totalHolidays                             Int?
  totalInterVisa                            Int?
  totalMonthlyHours                         Float?
  totalMonthlyHours100                      Float?
  totalMonthlyHours125                      Float?
  totalMonthlyHours150                      Float?
  totalSaturdays                            Int?
  totalSickLeaves                           Int?
  totalWorkingDays                          Int?
  window100Rate                             Float?
  window125Rate                             Float?
  window150Rate                             Float?
  // salaryReceiptStatus                       SalaryReceiptStatus  @default(PENDING)
  salaryReceiptStatusUpdatedAt              DateTime? // for later use
  smsReminderSentAt                         DateTime? // for later use
  // smsReminderStatus                         GeneralStatus?       @default(PENDING)
  supposedTotalMonthlyHours100ForNormalDays Float?
  supposedTotalMonthlyHours125ForNormalDays Float?
  supposedTotalMonthlyHours150ForNormalDays Float?
  supposedTotalMonthlyHours175              Float?
  supposedTotalMonthlyHours175ForNormalDays Float?
  supposedTotalMonthlyHours200              Float?
  supposedTotalMonthlyHours200ForNormalDays Float?
  supposedTotalMonthlyHoursForNormalDays    Float?
  totalForWeatherDays                       Float?
  totalMonthlyHours100ForNormalDays         Float?
  totalMonthlyHours125ForNormalDays         Float?
  totalMonthlyHours150ForNormalDays         Float?
  totalMonthlyHours175                      Float?
  totalMonthlyHours175ForNormalDays         Float?
  totalMonthlyHours200                      Float?
  totalMonthlyHours200ForNormalDays         Float?
  totalMonthlyHoursForNormalDays            Float?
  worker                                    Worker         @relation(fields: [workerId], references: [id], onDelete: Cascade)
  workerId                                  String
  // salaryReceipt                             WorkerSalaryReceipt?

  // New Container Fields
  totalContainersFilled Float?
  containersWindow100   Float?
  containersWindow125   Float?
  containersWindow150   Float?

  // New Money Fields
  totalBaseSalary     Float?
  totalBonus          Float?
  totalSalary         Float?
  totalHours125Salary Float?
  totalHours150Salary Float?

  // New Status Count Fields
  totalDaysInMonth Int?
  workingDays      Int?
  sickDays         Int?
  holidayDays      Int?
  absentDays       Int?
  dayOffDays       Int?
  interVisaDays    Int?
  accidentDays     Int?
  personalDays     Int?

  // New Percentage Fields
  attendancePercentage Float?

  // Relation to daily calculations
  dailyCalculations WorkerDailySalaryCalculation[]

  // Unique constraint
  @@unique([workerId, monthYear])
  // Indexes
  @@index([workerId, monthYear])
  @@index([workerId, firstDayOfMonth])
  @@index([workerId, approvalStatus])
  @@index([monthYear, approvalStatus])
  @@index([firstDayOfMonth, approvalStatus])
  @@index([workerId, isSentToSalarySystem])
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

model Bank {
  id          String   @id @default(cuid())
  bankId      String
  hebrewName  String
  englishName String?
  bankNumber  String?
  countryId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  branches    Branch[]
  workers     Worker[]
}

model Branch {
  id             String   @id @default(cuid())
  branchId       String
  hebrewName     String
  englishName    String?
  code           String?
  address        String?
  phone          String?
  secondaryPhone String?
  fax            String?
  email          String?
  comment        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  bankId         String?
  bank           Bank?    @relation(fields: [bankId], references: [id])
  workers        Worker[]
}

model Asset {
  id                           String                     @id @default(cuid())
  filePath                     String
  thumbnailFilePath            String?
  type                         AssetType
  status                       AssetStatus                @default(NOT_READY)
  isDeleted                    Boolean                    @default(false)
  documentForWorker            WorkerDocument?
  digitalFormTemplateForWorker WorkerDigitalFormTemplate?
  createdAt                    DateTime                   @default(now())
  updatedAt                    DateTime                   @updatedAt
  // profilePictureForForeignWorker ForeignWorker?
  // logoForOrganizationSystem      OrganizationSystem?
  // profilePictureForUser          User?
  // documentForWorkerFees          WorkerFees?
  // WorkerMonthlySalaryDocument    WorkerMonthlySalaryDocument[]
  // WorkersReportInterimDownload   WorkersReportInterimDownload[]
}

enum AssetType {
  PDF
  IMAGE
  DIGITAL_FORM_PDF_TEMPLATE_JSON
  UNKNOWN
}

enum AssetStatus {
  NOT_READY
  READY
  ERROR
}

model WorkerDocument {
  id                           String                    @id @default(cuid())
  name                         String
  category                     String?
  note                         String?
  type                         ForeignWorkerDocumentType
  slug                         String?
  authMode                     AuthMode?                 @default(NONE)
  isRemoteDocRead              Boolean?                  @default(false)
  isRemoteDocSubmitted         Boolean?                  @default(false)
  remoteDocInitiatedAt         DateTime?
  remoteDocReadAt              DateTime?
  remoteDocSmsStatus           GeneralStatus?            @default(PENDING)
  remoteDocSmsStatusAt         DateTime?
  remoteDocSubmittedAt         DateTime?
  isRemoteDocPasswordProtected Boolean?                  @default(false)
  remoteDocPassword            String?

  // bulkSigningSession             WorkerBulkSigningSession? @relation(fields: [bulkSigningSessionId], references: [id])
  // bulkSigningSessionId           String?
  // parentRemoteDocumentsRequest   RemoteDocumentsRequest?   @relation(fields: [parentRemoteDocumentsRequestId], references: [id])
  // parentRemoteDocumentsRequestId String?

  worker   Worker @relation(fields: [workerId], references: [id], onDelete: Cascade)
  workerId String

  documentAsset   Asset  @relation(fields: [documentAssetId], references: [id])
  documentAssetId String @unique

  templateCategory   WorkerTemplateCategory? @relation(fields: [templateCategoryId], references: [id])
  templateCategoryId String?

  simpleCategory   WorkerSimpleCategory? @relation(fields: [simpleCategoryId], references: [id])
  simpleCategoryId String?

  uploadedByUser   User?   @relation(fields: [uploadedByUserId], references: [id])
  uploadedByUserId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // @@index([bulkSigningSessionId])

  @@index([workerId])
}

enum ForeignWorkerDocumentType {
  UPLOADED
  SIGNED
  REMOTE_DOCUMENT
}

enum AuthMode {
  PHONE_OTP
  NONE
  EMAIL_OTP
  PASSWORD
}

enum GeneralStatus {
  PENDING
  COMPLETED
  INITIALIZED
  FAILED
  NOT_INITIALIZED
}

model WorkerSimpleCategory {
  id              String           @id @default(cuid())
  name            String
  workerDocuments WorkerDocument[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model WorkerTemplateCategory {
  id                         String                      @id @default(cuid())
  name                       String
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  workerDigitalFormTemplates WorkerDigitalFormTemplate[]
  workerDocuments            WorkerDocument[]
}

model WorkerDigitalFormTemplate {
  id                 String                  @id @default(cuid())
  name               String
  description        String?
  isDeleted          Boolean                 @default(false)
  templateCategory   WorkerTemplateCategory? @relation(fields: [templateCategoryId], references: [id])
  templateCategoryId String?
  templateAsset      Asset                   @relation(fields: [templateAssetId], references: [id])
  templateAssetId    String                  @unique
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
}

model SMS {
  id            String    @id @default(cuid())
  sentAt        DateTime  @default(now())
  readAt        DateTime?
  message       String
  status        SMSStatus @default(PENDING)
  failureReason String?

  sentBy SMSSentBy?
  sentTo SMSSentTo?

  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  client   Client? @relation(fields: [clientId], references: [id])
  clientId String?

  worker   Worker? @relation(fields: [workerId], references: [id])
  workerId String?

  manager   Manager? @relation(fields: [managerId], references: [id])
  managerId String?
  regionManager   RegionManager? @relation(fields: [regionManagerId], references: [id])
  regionManagerId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SMSStatus {
  PENDING
  SENT
  FAILED
}

enum SMSSentBy {
  WORKER
  CLIENT
  ORGANIZATION
  MANAGER
}

enum SMSSentTo {
  WORKER
  CLIENT
  ORGANIZATION
  MANAGER
}
